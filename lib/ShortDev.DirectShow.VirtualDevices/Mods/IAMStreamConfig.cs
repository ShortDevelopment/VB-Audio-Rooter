// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658,CS0436,CS8981
using global::System;
using global::System.Diagnostics;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Runtime.CompilerServices;
using global::System.Runtime.InteropServices;
using global::System.Runtime.Versioning;
using winmdroot = global::Windows.Win32;
namespace Windows.Win32
{
    namespace Media.DirectShow
    {
        [Guid("C6E13340-30AC-11D0-A18C-00A0C9118956"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown), ComImport()]
        [SupportedOSPlatform("windows5.0")]
        internal interface IAMStreamConfig_Mod
        {
            /// <summary>The SetFormat method sets the output format on the pin.</summary>
            /// <param name="pmt">Pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/strmif/ns-strmif-am_media_type">AM_MEDIA_TYPE</a> structure that specifies the new format.</param>
            /// <returns>
            /// <para>Returns an <b>HRESULT</b> value. Possible values include the following. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para>This method specifies the format for the output pin. If the pin is not connected, it will use this format for its next connection. If the pin is already connected, it will attempt to reconnect with this format. The method might fail if the other pin rejects the new type. If this method succeeds, subsequent calls to the <a href="https://docs.microsoft.com/windows/desktop/api/strmif/nf-strmif-ipin-enummediatypes">IPin::EnumMediaTypes</a> method will return the new type, and no others. On most filters, this method fails if the filter is paused or running. On some compression filters, the method fails if the filter's input pin is not connected. With some filters, you can call this method with the value <b>NULL</b> to reset the pin to its default format. <b>Filter Developers</b>: The following remarks describe how to implement this method: If the output pin is not connected, and the pin supports the specified media type, return S_OK. Store the media type and offer it as format number zero in the <a href="https://docs.microsoft.com/windows/desktop/DirectShow/cbasepin-getmediatype">CBasePin::GetMediaType</a> method. Do not offer other formats, and reject other formats in the <a href="https://docs.microsoft.com/windows/desktop/DirectShow/cbasepin-checkmediatype">CBasePin::CheckMediaType</a> method. If the pin is already connected, and the pin supports the media type, reconnect the pin with that type. If the other pin rejects the new type, return VFW_E_INVALIDMEDIATYPE and restore the original connection.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api/strmif/nf-strmif-iamstreamconfig-setformat#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig()]
            winmdroot.Foundation.HRESULT SetFormat(in winmdroot.Media.MediaFoundation.AM_MEDIA_TYPE pmt);

            /// <summary>The GetFormat method retrieves the current or preferred output format.</summary>
            /// <param name="ppmt">Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/strmif/ns-strmif-am_media_type">AM_MEDIA_TYPE</a> structure.</param>
            /// <returns>
            /// <para>Returns an <b>HRESULT</b> value. Possible values include the following. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para>If the pin is connected, this method returns the format that the pin is currently using. Otherwise, the method returns the pin's preferred format for the next pin connection. If you have already called the <a href="https://docs.microsoft.com/windows/desktop/api/strmif/nf-strmif-iamstreamconfig-setformat">IAMStreamConfig::SetFormat</a> method to set the format, <c>GetFormat</c> returns the same format. If not, it returns the first format in the pin's list of preferred formats, as determined by the <a href="https://docs.microsoft.com/windows/desktop/api/strmif/nf-strmif-ipin-enummediatypes">IPin::EnumMediaTypes</a> method. The method allocates the memory for the <b>AM_MEDIA_TYPE</b> structure, fills in the structure, and returns it in the <i>pmt</i> parameter. The caller must release the memory, including the format block. You can use the <a href="https://docs.microsoft.com/windows/desktop/DirectShow/deletemediatype">DeleteMediaType</a> helper function in the base class library. On some compression filters, the method fails if the filter's input pin is not connected.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api/strmif/nf-strmif-iamstreamconfig-getformat#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig()]
            winmdroot.Foundation.HRESULT GetFormat(out winmdroot.Media.MediaFoundation.AM_MEDIA_TYPE[] ppmt);

            /// <summary>The GetNumberOfCapabilities method retrieves the number of format capabilities that this pin supports.</summary>
            /// <param name="piCount">Pointer to a variable that receives the number of format capabilities.</param>
            /// <param name="piSize">Pointer to a variable that receives the size of the configuration structure in bytes. See Remarks for more information.</param>
            /// <returns>
            /// <para>Returns an <b>HRESULT</b> value. Possible values include the following. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para>An output pin can support more than one set of format capabilities. This method returns the total number of capabilities that the pin supports; the number is returned in the <i>piCount</i> parameter. To retrieve a particular set of capabilities, call the <a href="https://docs.microsoft.com/windows/desktop/api/strmif/nf-strmif-iamstreamconfig-getstreamcaps">IAMStreamConfig::GetStreamCaps</a> method. Format capabilities are indexed from zero, so the value returned in <i>piCount</i> is one more than the upper bound. Depending on the pin's format type, the [VIDEO_STREAM_CONFIG_CAPS](/windows/desktop/api/strmif/ns-strmif-video_stream_config_caps) structure (for video) or an [AUDIO_STREAM_CONFIG_CAPS](/windows/desktop/api/strmif/ns-strmif-audio_stream_config_caps) structure (for audio). The <i>piSize</i> parameter receives the size of the structure, in bytes. On some compression filters, this method fails if the filter's input pin is not connected.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api/strmif/nf-strmif-iamstreamconfig-getnumberofcapabilities#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig()]
            winmdroot.Foundation.HRESULT GetNumberOfCapabilities(out int piCount, out int piSize);

            /// <summary>The GetStreamCaps method retrieves a set of format capabilities.</summary>
            /// <param name="iIndex">Specifies the format capability to retrieve, indexed from zero. To determine the number of capabilities that the pin supports, call the <a href="https://docs.microsoft.com/windows/desktop/api/strmif/nf-strmif-iamstreamconfig-getnumberofcapabilities">IAMStreamConfig::GetNumberOfCapabilities</a> method.</param>
            /// <param name="ppmt">Address of a pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/strmif/ns-strmif-am_media_type">AM_MEDIA_TYPE</a> structure. The method allocates the structure and fills it with a media type.</param>
            /// <param name="pSCC">Pointer to a byte array allocated by the caller. For video, use the <a href="https://docs.microsoft.com/windows/win32/api/strmif/ns-strmif-video_stream_config_caps">VIDEO_STREAM_CONFIG_CAPS</a> structure (see Remarks). For audio, use the <a href="https://docs.microsoft.com/windows/win32/api/strmif/ns-strmif-audio_stream_config_caps">AUDIO_STREAM_CONFIG_CAPS</a> structure. To determine the required size of the array, call the <b>GetNumberOfCapabilities</b> method. The size is returned in the <i>piSize</i> parameter.</param>
            /// <returns>
            /// <para>Returns an <b>HRESULT</b> value. Possible values include the following. </para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para>This method returns two pieces of information: </para>
            /// <para>This doc was truncated.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api/strmif/nf-strmif-iamstreamconfig-getstreamcaps#">Read more on docs.microsoft.com</see>.</para>
            /// </remarks>
            [PreserveSig()]
            unsafe winmdroot.Foundation.HRESULT GetStreamCaps(int iIndex, out winmdroot.Media.MediaFoundation.AM_MEDIA_TYPE[] ppmt, void* pSCC);
        }
    }
}
